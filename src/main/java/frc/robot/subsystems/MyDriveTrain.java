// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package frc.robot.subsystems;


import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
 import com.ctre.phoenix.motorcontrol.FeedbackDevice;
 import com.ctre.phoenix.motorcontrol.NeutralMode;
 import com.ctre.phoenix.motorcontrol.StatusFrameEnhanced;
import com.ctre.phoenix.motorcontrol.can.WPI_TalonFX;
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import com.ctre.phoenix.sensors.PigeonIMU;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import oi.limelightvision.limelight.frc.LimeLight;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class MyDriveTrain extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private WPI_TalonFX talon_FX_Left_1;
private WPI_TalonFX talon_FX_Right_1;
private DifferentialDrive driveTrain_Differential_Drive;
private WPI_TalonSRX talonSRXEnhanced1;
private LimeLight limeLight1;
private PigeonIMU pigeonIMU1;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public MyDriveTrain() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
talon_FX_Left_1 = new WPI_TalonFX(15);


        
talon_FX_Right_1 = new WPI_TalonFX(0);


        
driveTrain_Differential_Drive = new DifferentialDrive(talon_FX_Left_1, talon_FX_Right_1);
addChild("DriveTrain_Differential_Drive",driveTrain_Differential_Drive);
driveTrain_Differential_Drive.setSafetyEnabled(true);
driveTrain_Differential_Drive.setExpiration(0.1);
driveTrain_Differential_Drive.setMaxOutput(1.0);

        
talonSRXEnhanced1 = new WPI_TalonSRX(1);

   /* Factory default hardware to prevent unexpected behavior */
talonSRXEnhanced1.configFactoryDefault();

        /* Invert Motor? and set Break Mode */
talonSRXEnhanced1.setInverted(false);
talonSRXEnhanced1.setNeutralMode(NeutralMode.Coast);

        /* Set the peak and nominal outputs */
talonSRXEnhanced1.configNominalOutputForward(0, 30);
talonSRXEnhanced1.configNominalOutputReverse(0, 30);
talonSRXEnhanced1.configPeakOutputForward(1, 30);
talonSRXEnhanced1.configPeakOutputReverse(-1, 30);
        
/* Configure Sensor */
        // Phase sensor to have positive increment when driving Talon Forward (Green LED)
talonSRXEnhanced1.configSelectedFeedbackSensor(FeedbackDevice.QuadEncoder, 0, 30);
talonSRXEnhanced1.setSensorPhase(false);

/* Set relevant frame periods to be at least as fast as periodic rate */
talonSRXEnhanced1.setStatusFramePeriod(StatusFrameEnhanced.Status_13_Base_PIDF0, 10, 30);
talonSRXEnhanced1.setStatusFramePeriod(StatusFrameEnhanced.Status_10_MotionMagic, 10, 30);

        /* Set gains in slot0 - see documentation */
talonSRXEnhanced1.selectProfileSlot(0, 0);
talonSRXEnhanced1.config_kF(0, 0.0, 30);
talonSRXEnhanced1.config_kP(0, 0.0, 30);
talonSRXEnhanced1.config_kI(0, 0.0, 30);
talonSRXEnhanced1.config_kD(0, 0.0, 30);
        











        
        
limeLight1 = new LimeLight("limelight");


        
pigeonIMU1 = new PigeonIMU(8);


        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new MyDriveWithJoystick());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

