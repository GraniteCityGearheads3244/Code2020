// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package frc.robot.subsystems;


import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
 import com.ctre.phoenix.motorcontrol.FeedbackDevice;
 import com.ctre.phoenix.motorcontrol.NeutralMode;
 import com.ctre.phoenix.motorcontrol.StatusFrameEnhanced;
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class MyPowerCell_ShotHeight extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private WPI_TalonSRX _talon;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public MyPowerCell_ShotHeight() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
_talon = new WPI_TalonSRX(7);

   /* Factory default hardware to prevent unexpected behavior */
_talon.configFactoryDefault();

        /* Invert Motor? and set Break Mode */
_talon.setInverted(false);
_talon.setNeutralMode(NeutralMode.Brake);

        /* Set the peak and nominal outputs */
_talon.configNominalOutputForward(0, 30);
_talon.configNominalOutputReverse(0, 30);
_talon.configPeakOutputForward(1, 30);
_talon.configPeakOutputReverse(-1, 30);
        
/* Configure Sensor */
        // Phase sensor to have positive increment when driving Talon Forward (Green LED)
_talon.configSelectedFeedbackSensor(FeedbackDevice.Analog, 0, 30);
_talon.setSensorPhase(false);

/* Set relevant frame periods to be at least as fast as periodic rate */
_talon.setStatusFramePeriod(StatusFrameEnhanced.Status_13_Base_PIDF0, 10, 30);
_talon.setStatusFramePeriod(StatusFrameEnhanced.Status_10_MotionMagic, 10, 30);

        /* Set gains in slot0 - see documentation */
_talon.selectProfileSlot(0, 0);
_talon.config_kF(0, 0.0, 30);
_talon.config_kP(0, 0.0, 30);
_talon.config_kI(0, 0.0, 30);
_talon.config_kD(0, 0.0, 30);
        
/* Set acceleration and vcruise velocity - see documentation */
_talon.configMotionCruiseVelocity(0, 30);
_talon.configMotionAcceleration(0, 30);











        
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

